class StackOverflowTest
	types
		public String = seq of char;
instance variables
	s : StackOverflow := new StackOverflow();

operations

	private assertTrue: bool ==> ()
	assertTrue(cond) == return
	pre cond;
	
	-- check if a user is registered
	private testCreateUser : () ==> ()
	testCreateUser() == (
		dcl user: User := new User("user", "pass");
		s.signup("user", "pass");
		s.signup("user2", "pass2");
		s.signup("user3", "pass3");
		
		assertTrue(user.username = "user");
		assertTrue(user.password = "pass");
		assertTrue(s.users(0).equals(user));
	);
	
	private testCreateSameUser : () ==> ()
	testCreateSameUser() == (
--		dcl user: User := new User("user", "pass");
		s.signup("user", "pass");
--		s.signup("user", "pass2");
	);
	
	private testLoginUser : () ==> ()
	testLoginUser() == (
--		dcl user: User := new User("user", "pass");
--		s.signup("user", "pass");
		s.login("user", "pass");
		assertTrue(s.loggedUser <> nil);
	);
	
	private testLogoutUser : () ==> ()
	testLogoutUser() == (
--		dcl user: User := new User("user", "pass");
--		s.signup("user", "pass");
--		s.login("user", "pass");
		s.logout();
		assertTrue(s.loggedUser = nil);
	);
	
	private testLoggedID : () ==> ()
	testLoggedID() == (
		assertTrue(s.loggedUser = nil);
		s.signup("user", "pass");
		s.login("user", "pass");
		assertTrue(s.getLoggedID() = 0);
	);
	
	private testAskQuestion : () ==> ()
	testAskQuestion() == (
		s.login("user", "pass");
		assertTrue(card dom s.questions = 0);
		s.askQuestion("what is the square root of PI?", "example description", "math");
		s.logout();
		assertTrue(card dom s.questions = 1);
	);
	
	private testAnswerQuestion : () ==> ()
	testAnswerQuestion() == (
		s.login("user2", "pass2");
		assertTrue(card dom s.answers = 0);
		assertTrue(s.getLoggedID() = 1);
		s.answerQuestion(0, "The answer is 1.73454256324");
		s.logout();
		assertTrue(card dom s.questions = 1);
		assertTrue(card dom s.answers = 1);
		assertTrue(s.answers(0).text = "The answer is 1.73454256324");
		assertTrue(s.answers(0).userID = 1);
	);
	
	private testUpvoteQuestion : () ==> ()
	testUpvoteQuestion() == (
		s.login("user2", "pass2");
		assertTrue(card s.votes = 0);
		s.upvoteQuestion(0);
		assertTrue(card s.votes = 1);
		s.logout();
	);
	
	private testDownvoteQuestion : () ==> ()
	testDownvoteQuestion() == (
		s.login("user3", "pass3");
		assertTrue(card s.votes = 1);
		s.downvoteQuestion(0);
		assertTrue(card s.votes = 2);		
		s.logout();
	);
	
		private testUpvoteAnswer : () ==> ()
	testUpvoteAnswer() == (
		s.login("user", "pass");
		assertTrue(card s.votes = 2);
		s.upvoteAnswer(0);
		assertTrue(card s.votes = 3);
		s.logout();
	);
	
	private testDownvoteAnswer : () ==> ()
	testDownvoteAnswer() == (
		s.login("user3", "pass3");
		assertTrue(card s.votes = 3);
		assertTrue(s.getLoggedID() = 2);
		assertTrue(s.answers(0).userID <> 2);
		s.downvoteAnswer(0);
		assertTrue(card s.votes = 4);		
		s.logout();
	);
	
	private testAcceptAnswer : () ==> ()
	testAcceptAnswer() == (
		s.login("user", "pass");
		s.acceptAnswer(0, 0);
		assertTrue(s.answers(0).accepted= true);
		assertTrue(s.questions(0).closed = true);
		s.logout();
	);
	
	private testEditQuestion : () ==> ()
	testEditQuestion() == (
		s.login("user", "pass");
		assertTrue(s.questions(0).text = "what is the square root of PI?");
		assertTrue(s.questions(0).description = "example description");
		
		s.editQuestion(0, "What is the value of cubic root of PI?", "mock description");
		assertTrue(s.questions(0).text = "What is the value of cubic root of PI?");
		assertTrue(s.questions(0).description = "mock description");	
		s.logout();	
	);
	
	private testEditAnswer : () ==> ()
	testEditAnswer() == (
		s.login("user2", "pass2");
		assertTrue(s.answers(0).text = "The answer is 1.73454256324");
		
		s.editAnswer(0, "The answer is 1.34534421");
		assertTrue(s.answers(0).text = "The answer is 1.34534421");
		s.logout();	
	);
	
	private comment: () ==> ()
	comment() == (
		s.login("user3", "pass3");
		assertTrue(card dom s.comments = 0);
		
		s.comment(0, 0, "No, you're wrong.");
		assertTrue(card dom s.comments = 1);
		s.logout();	
	);
	
	
	private printUsers : () ==> ()
	printUsers() == (
		s.printUsers();
	);
	
	private printQuestions : () ==> ()
	printQuestions() == (
		s.printQuestions();
	);
	
	public static main: () ==> ()
	main() == (
		dcl s : StackOverflowTest := new StackOverflowTest();
		s.testCreateUser();
--		new StackOverflowTest().testCreateSameUser();
		s.testLoginUser();
		s.testLogoutUser();
		new StackOverflowTest().testLoggedID();
		s.testAskQuestion();
		
		s.testUpvoteQuestion();
		s.testDownvoteQuestion();
		
		s.testAnswerQuestion();
		
		s.printQuestions();

		s.testUpvoteAnswer();
		s.testDownvoteAnswer();
		
		s.testEditQuestion();
		s.comment();
		
		s.testEditAnswer();
		s.testAcceptAnswer();
		
		s.printUsers();
		s.printQuestions();
	);
		  
end StackOverflowTest