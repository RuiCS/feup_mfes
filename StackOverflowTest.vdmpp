class StackOverflowTest
	types
		public String = seq of char;
instance variables
	s : StackOverflow := new StackOverflow();

operations

	private assertTrue: bool ==> ()
	assertTrue(cond) == return
	pre cond;
	
	-- check if a user is registered
	private testCreateUser : () ==> ()
	testCreateUser() == (
		dcl user: User := new User("user", "pass");
		s.signup("user", "pass");
		s.signup("user2", "pass2");
		s.signup("user3", "pass3");
		
		assertTrue(user.username = "user");
		assertTrue(user.password = "pass");
		assertTrue(s.users(0).equals(user));
	);
	
	private testCreateSameUser : () ==> ()
	testCreateSameUser() == (
--		dcl user: User := new User("user", "pass");
		s.signup("user", "pass");
--		s.signup("user", "pass2");
	);
	
	private testLoginUser : () ==> ()
	testLoginUser() == (
--		dcl user: User := new User("user", "pass");
--		s.signup("user", "pass");
		s.login("user", "pass");
		assertTrue(s.loggedUser <> nil);
	);
	
	private testLogoutUser : () ==> ()
	testLogoutUser() == (
--		dcl user: User := new User("user", "pass");
--		s.signup("user", "pass");
--		s.login("user", "pass");
		s.logout();
		assertTrue(s.loggedUser = nil);
	);
	
	private testLoggedID : () ==> ()
	testLoggedID() == (
--		dcl user: User := new User("user", "pass");
		s.signup("user", "pass");
		s.login("user", "pass");
		assertTrue(s.getLoggedID() = 0);
	);
	
	private testAskQuestion : () ==> ()
	testAskQuestion() == (
		s.login("user", "pass");
		s.askQuestion("what is the square root of PI?", "example description", "math");
		s.logout();
--		assertTrue()
	);
	
	private testAnswerQuestion : () ==> ()
	testAnswerQuestion() == (
		s.login("user2", "pass2");
		s.answerQuestion(0, "The answer is 1.73454256324");
		s.logout();
--		assertTrue()
	);
	
	private testUpvoteQuestion : () ==> ()
	testUpvoteQuestion() == (
		s.login("user2", "pass2");
		s.upvoteQuestion(0);
		s.logout();
	);
	
	private testDownvoteQuestion : () ==> ()
	testDownvoteQuestion() == (
		s.login("user3", "pass3");
		s.downvoteQuestion(0);
		s.logout();
	);
	
		private testAcceptAnswer : () ==> ()
	testAcceptAnswer() == (
		s.login("user", "pass");
		s.acceptAnswer(0, 0);
		s.logout();
	);
	
	private printUsers : () ==> ()
	printUsers() == (
		s.printUsers();
	);
	
	private printQuestions : () ==> ()
	printQuestions() == (
		s.printQuestions();
	);
	
	public static main: () ==> ()
	main() == (
		dcl s : StackOverflowTest := new StackOverflowTest();
		s.testCreateUser();
--		new StackOverflowTest().testCreateSameUser();
		s.testLoginUser();
		s.testLogoutUser();
		new StackOverflowTest().testLoggedID();
		s.testAskQuestion();
		s.testAnswerQuestion();
		s.testUpvoteQuestion();
		s.testDownvoteQuestion();
		
		s.testAcceptAnswer();
		
		s.printUsers();
		s.printQuestions();
	);
		  
end StackOverflowTest